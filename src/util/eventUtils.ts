export const captureEvent = (e:any) => {
    e.preventDefault();
    e.stopPropagation();
    e.nativeEvent.stopImmediatePropagation();
}

export const captureAllEvents = (cb:any, overrides:any) => {
    return{
        onCopy: cb,
        onCopyCapture: cb,
        onCut: cb,
        onCutCapture: cb,
        onPaste: cb,
        onPasteCapture: cb,
        onCompositionEnd: cb,
        onCompositionEndCapture: cb,
        onCompositionStart: cb,
        onCompositionStartCapture: cb,
        onCompositionUpdate: cb,
        onCompositionUpdateCapture: cb,
        onFocus: cb,
        onFocusCapture: cb,
        onBlur: cb,
        onBlurCapture: cb,
        onChange: cb,
        onChangeCapture: cb,
        onBeforeInput: cb,
        onBeforeInputCapture: cb,
        onInput: cb,
        onInputCapture: cb,
        onReset: cb,
        onResetCapture: cb,
        onSubmit: cb,
        onSubmitCapture: cb,
        onInvalid: cb,
        onInvalidCapture: cb,
        onLoad: cb,
        onLoadCapture: cb,
        onError: cb,
        onErrorCapture: cb,
        onKeyDown: cb,
        onKeyDownCapture: cb,
        onKeyPress: cb,
        onKeyPressCapture: cb,
        onKeyUp: cb,
        onKeyUpCapture: cb,
        onAbort: cb,
        onAbortCapture: cb,
        onCanPlay: cb,
        onCanPlayCapture: cb,
        onCanPlayThrough: cb,
        onCanPlayThroughCapture: cb,
        onDurationChange: cb,
        onDurationChangeCapture: cb,
        onEmptied: cb,
        onEmptiedCapture: cb,
        onEncrypted: cb,
        onEncryptedCapture: cb,
        onEnded: cb,
        onEndedCapture: cb,
        onLoadedData: cb,
        onLoadedDataCapture: cb,
        onLoadedMetadata: cb,
        onLoadedMetadataCapture: cb,
        onLoadStart: cb,
        onLoadStartCapture: cb,
        onPause: cb,
        onPauseCapture: cb,
        onPlay: cb,
        onPlayCapture: cb,
        onPlaying: cb,
        onPlayingCapture: cb,
        onProgress: cb,
        onProgressCapture: cb,
        onRateChange: cb,
        onRateChangeCapture: cb,
        onResize: cb,
        onResizeCapture: cb,
        onSeeked: cb,
        onSeekedCapture: cb,
        onSeeking: cb,
        onSeekingCapture: cb,
        onStalled: cb,
        onStalledCapture: cb,
        onSuspend: cb,
        onSuspendCapture: cb,
        onTimeUpdate: cb,
        onTimeUpdateCapture: cb,
        onVolumeChange: cb,
        onVolumeChangeCapture: cb,
        onWaiting: cb,
        onWaitingCapture: cb,
        onAuxClick: cb,
        onAuxClickCapture: cb,
        onClick: cb,
        onClickCapture: cb,
        onContextMenu: cb,
        onContextMenuCapture: cb,
        onDoubleClick: cb,
        onDoubleClickCapture: cb,
        onDrag: cb,
        onDragCapture: cb,
        onDragEnd: cb,
        onDragEndCapture: cb,
        onDragEnter: cb,
        onDragEnterCapture: cb,
        onDragExit: cb,
        onDragExitCapture: cb,
        onDragLeave: cb,
        onDragLeaveCapture: cb,
        onDragOver: cb,
        onDragOverCapture: cb,
        onDragStart: cb,
        onDragStartCapture: cb,
        onDrop: cb,
        onDropCapture: cb,
        onMouseDown: cb,
        onMouseDownCapture: cb,
        onMouseEnter: cb,
        onMouseLeave: cb,
        onMouseMove: cb,
        onMouseMoveCapture: cb,
        onMouseOut: cb,
        onMouseOutCapture: cb,
        onMouseOver: cb,
        onMouseOverCapture: cb,
        onMouseUp: cb,
        onMouseUpCapture: cb,
        onSelect: cb,
        onSelectCapture: cb,
        onTouchCancel: cb,
        onTouchCancelCapture: cb,
        onTouchEnd: cb,
        onTouchEndCapture: cb,
        onTouchMove: cb,
        onTouchMoveCapture: cb,
        onTouchStart: cb,
        onTouchStartCapture: cb,
        onPointerDown: cb,
        onPointerDownCapture: cb,
        onPointerMove: cb,
        onPointerMoveCapture: cb,
        onPointerUp: cb,
        onPointerUpCapture: cb,
        onPointerCancel: cb,
        onPointerCancelCapture: cb,
        onPointerEnter: cb,
        onPointerLeave: cb,
        onPointerOver: cb,
        onPointerOverCapture: cb,
        onPointerOut: cb,
        onPointerOutCapture: cb,
        onGotPointerCapture: cb,
        onGotPointerCaptureCapture: cb,
        onLostPointerCapture: cb,
        onLostPointerCaptureCapture: cb,
        onScroll: cb,
        onScrollCapture: cb,
        onWheel: cb,
        onWheelCapture: cb,
        onAnimationStart: cb,
        onAnimationStartCapture: cb,
        onAnimationEnd: cb,
        onAnimationEndCapture: cb,
        onAnimationIteration: cb,
        onAnimationIterationCapture: cb,
        onTransitionEnd: cb,
        onTransitionEndCapture: cb,

        ...overrides
    }
}

export const captureDraggableEvents = (cb:any, overrides:any) => {
    return{
        onDrag: cb,
        onDragCapture: cb,
        onDragEnd: cb,
        onDragEndCapture: cb,
        onDragEnter: cb,
        onDragEnterCapture: cb,
        onDragExit: cb,
        onDragExitCapture: cb,
        onDragLeave: cb,
        onDragLeaveCapture: cb,
        onDragOver: cb,
        onDragOverCapture: cb,
        onDragStart: cb,
        onDragStartCapture: cb,
        onDrop: cb,
        onDropCapture: cb,
        onPointerDown: cb,
        ...overrides
    }
}

export const forAllClickEvents = (cb:any) => {
    return {
        onPointerDown: cb,
        onClick: cb,
        onMouseDown: cb,
        onTouchStart: cb,
    }
}